<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F05%2F11%2F1%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[算法导论-MIT第一节 课程简介及算法分析1.1 为什么要学习算法 性能像货币，其他东西像水、空气等等东西。性能是处于最底层的东西。 性能是一个衡量标准，它像是货币，人们甚至愿意用性能来交换其他东西，比如JAVA比C慢，但人们宁愿牺牲性能也要用JAVA来编程 1.2 一些算法的基本概念1.2.1 排序 插入排序 伪代码 12345678Insert.Sort(A,n) //Sort[1...n] for j = 2 to n do key=A[j] i = j-1 while i&gt;0 and A[i] &gt; key do A[i+1] = A[i] i = i-1 A[i+1] = key 执行时间 取决于输入序列（如already sorted最好，逆序最差） 取决于输入序列的size 依输入的规模将其参数化，把运行时间看作待排列数据规模的函数 上界 代表了对用户的承诺 分析类型 最坏情况分析（常用） T(n) = 输入规模为n时的最长运行时间 T(n)在某种意义上只能算一种相关性，而不能算函数，因为还牵扯到输入规模n之下到底是怎么样的一个输入 平均情况分析 T(n) = 输入规模为n时所有可能输入的期望时间 期望时间：每种输入出现的概率*每种输入的运行时间。是一种加权平均。 无法知道出现的概率。需要一个有关输入的统计分布的假设。 最好情况分析-假象欺骗 欺骗。可以用一个慢速算法，但它对于某些输入很快。 插入排序的最差情况时间？ 取决于运行它的计算机 相对速度：在同样的计算机上运行 绝对速度：在不同的计算机上运行 逆序情况 $$T(n) = \sum_{j=2}^n{\theta(n)} = \theta(n^2)$$ θ是个弱符号，与其说是个运算符号，不如说是个描述符号 插入排序快吗？ 对于很小的n，挺快的。对大的n，很慢 BIG IDEA 渐进分析 忽略掉依赖于机器的常量 关注运行时间的增长而不是去检查实际运行时间 渐进符号 θ符号 写个公式，弃去它的低阶项，并忽略前面的常数因子。 EX. $3n^3 + 90n^2 - 5n + 6046 = \theta(n^3)$ $n\to\infty$时，θ(n2)算法迟早会战胜一个θ(n3)算法。即使θ(n2)跑在一台慢计算机而θ(n3)跑在一台快计算机。它能一举满足相对和绝对速度的双重比较要求。 我们关注慢速算法，虽然在渐进的观点看可能比较慢，但是仍然可以在合理的规模下运行得更快。（数学思维+工程思维） 归并排序 MergeSort A[1…n] | T(n) —|— If n = 1, done | θ(1) 递归地，排序 A[1,…,ceil(n/2)] 和A [ceil(n/2)+1,….,n] | 2T(n/2) 把排好序的两个表归并 | θ(n) 关键子步骤：归并。n个元素时间为θ(n)，常称为线性时间。 因此 $$T(n) = \begin{cases} \theta(1), if n=1\ 2T(n/2)+\theta(n)+\theta(1) = 2T(n/2)+\theta(n)\ \end{cases} $$ 如何解递归式——递归树方法$T(n)=2T(n/2)+cn$，const c&gt;0把上式写成树状 T(n) = 123graph TBcn--&gt;T(n/2)cn--&gt;T`(n/2) 等于 1234567graph TBcn--&gt;cn/2cn--&gt;`(cn/2)cn/2--&gt;T(n/4)cn/2--&gt;T`(n/4)`(cn/2)--&gt;T``(n/4)`(cn/2)--&gt;T```(n/4) 等于… 123456789graph TBcn--&gt;cn/2cn--&gt;`(cn/2)cn/2--&gt;T(n/4)cn/2--&gt;T`(n/4)`(cn/2)--&gt;T``(n/4)`(cn/2)--&gt;T```(n/4)T(n/4)--&gt;...... --&gt;θ1 树的高度h = lgn叶节点数目leaves = n每一层都做了cn的工作，叶节点层加起来做了θ(n)的工作。故$$T(n) = cn*lgn + \theta(n) = \theta(nlgn)$$ 超过30个元素，归并就比插入快。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux鸟哥的私房菜第2章]]></title>
    <url>%2F2019%2F04%2F15%2FLinux%E9%B8%9F%E5%93%A5%E7%9A%84%E7%A7%81%E6%88%BF%E8%8F%9C%E7%AC%AC2%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[主机规划与磁盘分区2.1 Linux与硬件的搭配 Linux对于计算机个组件的分辨，与贯用的Windows系统完全不一样，因为各个组件在Linux下都是一个文件。因此在认识各项组件之后，学习Linux的装置档名之前，务必要现将Windows对于组件的名称的概念先拿掉，否则会很难理解。 2.1.3 各硬件装置在Linux中的档名 选择好你所需要的硬件配备后，接下来得要了解一下各硬件在Linux当中所扮演的角色。举例来说，IDE接口的硬盘的文件名称即为/dev/hd[a-d]，其中， 括号内的字母为a-d当中的任意一个，亦即有/dev/hda, /dev/hdb, /dev/hdc, 及 /dev/hdd这四个文件的意思。 中括号[]表示法在后面会频繁使用。 几乎所有硬件装置文件都在/dev这个目录内。 常见装置与其在Linux中的档名 装置 | 档名 | -IDE硬盘机 | /dev/hd[a-d]（已被淘汰，被模拟成/dev/sd[a-p]了）SCSI/SATA/U盘硬盘机 | /dev/sd[a-p]U盘快闪碟 | /dev/sd[a-p] （与SATA同）VirtualI/O界面 | /dev/vd[a-p]（用于虚拟机器内）软盘机 | /dev/fd[0-1]打印机 | U盘：/dev/usb/lp[0-15]鼠标 | U盘：/dev/usb/mouse[0-15]当前CDROM/DVDROM | /dev/cdrom当前的鼠标 | /dev/mouse 特别留意硬盘（IDE/SCSI/U盘），每个磁碟机的磁盘分区不同时，其碟档名会改变。记住IDE与SATA硬盘的档名就是了。 2.2 磁盘分割 Linux是安装在磁盘上的。我们知道Windows上磁盘可以分为C、D、E盘，但Linux的硬件都是以档案的形态存在，那分区的名称又是什么？如何进行磁盘分区？磁盘分区有哪些限制？目前的BIOS与UEFI分别是啥？MSDOS与GPT又是啥？ 2.2.1 磁盘连接的方式与装置档名的关系 目前，SATA/USB/SAS/IDE接口的磁盘的装置名都是/dev/sd[a-p]，虚拟机环境下为了加速，会使用/dev/vd[a-p]这种装置名。 根据Linux内核侦测到的磁盘顺序来决定装置名。SATA磁盘比USB先识别到，以sda、sdb、sdc…的顺序分配名字。 如果一个硬盘被分为多个区，则每个分区的装置名是什么？ 磁盘结构：如下图（磁区 = 扇区，磁轨 = 磁道）图 整个磁盘的第一个分区最重要，因为它记录了整个磁盘的重要信息。早期第一个分区里的重要信息称为MBR（Master Boot Record）格式，但是由于近年来磁盘容量不断扩大，造成读写上的一些困扰，因此又多了一个新的磁盘分割格式，称为GPT（GUID patition table）。 2.2.2 MSDOS(MBR) 与 GPT 磁盘分割表(partition table) 通常硬盘有多个磁盘，柱面通常是分割分区的最小单位。因为近来有GPT这个可以达到64bit记录功能的分割表，现在甚至可以用扇区号来作为分割单位。 MSDOS（MBR）分割表格式与限制 早期的Linux为了兼容Windows的磁盘，因此使用的是支持Windows的MBR方式来处理开机管理程序和分割表。这两个都放在硬盘的第一个分区，通常都是512B。 主要开机记录区（Master Boot Record, MBR）：可以安装开机管理程序的地方，有446B。 分割表（partition table）：记录整个硬盘的分割状态，有64B。 分割表仅有64B，因此最多只能有四组记录区，每组记录区记录了该区段的起始与结束的柱面号，这四个分区被称为主要（Primary）或延伸（Extended）分区。延伸分区最多只有一个。如图： 若上面的磁盘装置档名为/dev/sda，则四个分区的档名为/dev/sda1，/dev/sda2，/dev/sda3，/dev/sda4。在Windows里分别为C，D，E，F。当有资料要写入F盘时，将会被写入到磁盘的301~400号柱面之间。 所谓的分区就是针对那个64B分割表进行设定。 当系统要写入磁盘时，一定会参考分割表，才能针对某个分区进行资料处理。 磁盘为什么要分区 资料的安全性：重装系统不用清空D盘 系统性能考量：资料集中在某个柱面的区段，由于资料集中了，将有助于资料读取的速度与性能。 延伸分割：如何分出不止四个区分？ 原理：利用额外的分区来记录更多的分割信息，如下图： - 如上图，四个分割记录区只用到两个，P1为主要分割，P2为延伸分割。我们可以通过延伸分割所指向的那块区块继续记录分割的信息。那五个由延伸分割继续切出来的分区，称为逻辑分区。分区名如下： - P1:/dev/sda1 - P2:/dev/sda2 - L1:/dev/sda5 - L2:/dev/sda6 - L3:/dev/sda7 - L4:/dev/sda8 - L5:/dev/sda9 - 前面四个号码都是保留给Primary或Extended用的，逻辑分区的名称编号从5开始。 - 只要读取硬盘都是从第一个磁区读起，因此如果第一个磁区（MBR与分割表所在的磁区）坏掉了，这个硬盘就坏了。因为系统找不到分割表，无法读取柱面区间。 - 由于每组分割表仅有16B，因此可记录的信息很有限。MBR分割表的限制： - 无法抓取到2.2T以上的磁盘容量 - MBR只有一个区块，若被破坏，磁盘基本无法挽救 - MBR内的存放开机管理程序的区块只有446B，无法容纳较多的程序。 GUID partition table磁盘分割表 2.2.3 开机流程中的BIOS与UEFI开机检测程序 电脑是如何读取硬盘内的操作系统？目前载入硬件驱动方面的程序，主要有早期的BIOS与新兴UEFI两种机制 BIOS搭配MBR/GPT的开机流程 CMOS是记录各项硬件参数且嵌入在主板上的存储器。 BIOS是一个写入到主板上的一个韧体，就是写入到硬件上的一个软件程序。是计算机主动执行的第一个程序。 开机流程 BIOS：分析计算机存储设备，以硬盘为例，读取第一个磁区MBR位置。 MBR：]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux与UNIX的联系与区别]]></title>
    <url>%2F2019%2F04%2F10%2FLinux%E4%B8%8EUNIX%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[https://www.cnblogs.com/liulei-LL/p/7899356.html]]></content>
      <categories>
        <category>Linux鸟哥的私房菜</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux鸟哥的私房菜第1章]]></title>
    <url>%2F2019%2F04%2F09%2FLinux%E9%B8%9F%E5%93%A5%E7%9A%84%E7%A7%81%E6%88%BF%E8%8F%9C%E7%AC%AC1%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[Linux是什么 主要介绍Linux的历史、认识Linux 1.1 Linux是什么 Linux源自哪里？为什么Linux不用钱？ 1.1.1 Linux是什么 Linux是一套操作系统，就是内核与系统调用接口两层 软件移植 由于不同的硬件的功能函数并不相同，所以同一套OS无法在不同的硬件平台上运行。如果能够参考硬件的功能函数并修改你的OS程序代码，那经过改版后的OS就能够在另一个硬件平台上运行了。 Linux提供了一个完整的OS中最底层的硬件控制与资源管理的完整架构，这个架构是沿袭UNIX良好传统而来的，所以相当稳定并且功能强大，可以在x86系统上跑。 Linux仅是其内核与内核提供的工具。 为什么Linux是很稳定的OS？它是如何来的？ 1.1.2 Linux之前的UNIX的历史 1969以前：BELL、MIT、GE共同发起Multics项目，目的是想要让大型主机可以同时提供300台以上的终端机连接使用。由于项目进度落后，资金缺乏，Bell实验室退出了该项目。 1969年：Ken Thompson的小型File Server System 退出Multics后，Thompson用汇编语言写出了一组内核程序，同时包括一些内核工具程序，以及一个小的文件系统。该系统就是UNIX的原型，被实验室的人成为Unics。 Thompson的文件系统有两个重要概念 所有的程序或系统装置都是文件。 不管构建编辑器还是附属文件，所写的程序只有一个目的，就是要有效地完成目标。 1973年：UNIX正式诞生，Ritchie等人以C语言写出第一个正式UNIX内核 因为Unics本来是以汇编语言写的，汇编语言具有专一性，每次安装到不同的机器都得重新编写汇编语言。 Ritchie以C语言重新改写与编译Unics的内核，最后发行出UNIX的正式版本。这使得UNIX很容易被移植到不同机器上。 1977年：重要的UNIX分支——BSD诞生 伯克利大学的Bill Joy在取得UNIX的内核源码后，修改成合适自己机器的版本，并且同时增加了很多工具软件与编译程序，最终命名为Berkeley Software Distribution(BSD)。Bill是Sun的创办者，Sun公司即是以BSD开发的内核进行自己的商业UNIX版本的开发的。 1979年：重要的System V架构与版权声明 很多公司各自出产的计算机配套搭配自己的UNIX操作系统，早期没有支持PC的操作系统出现。 AT&amp;T（BELL隶属于AT&amp;T）推出System V第七版UNIX，可以支持X86架构的PC。 AT&amp;T处于商业考虑，想收回UNIX版权，提出“不可对学生提供原码”的严格限制。造成UNIX业界的紧张气氛，引发了很多商业纠纷。 目前被称为纯种UNIX指的是System V和BSD这两套。 1984年之一 : x86架构的Minix操作系统 谭邦宁教授无法教UNIX内核源码相关学问，于是自己动手将UNIX改写并移植到x86上，称为Minix，主要用在教育上。 1984年之二： GNU项目与FSF基金会成立 GNU项目的推展 Richard Mathew Stallman（史托曼）1984年开始GNU项目，目的是创建一个自由开放的UNIX操作系统（Free UNIX） 先写UNIX上运行的小程序，参考UNIX上现有的软件，依据这些软件的作用开发出功能相同的软件。GNU软件因为免费，逐渐打开知名度 C语言编译程序版本众多，但都是专利软件，于是开始编写C的编译程序，即GNU C Complier(GCC)! 史托曼成立自由软件基金会（Free Software Foundation，FSF），请更多工程师与志愿者一起完成了GCC。同时他还编写了更多可以被调用的C函数库（GNU C Library），以及用来操作OS的基本接口bash shell。这些都在1990年左右完成。 GNU的通用公共许可证 1985年为了避免GNU所开发的自由软件被其他人利用而成为专利软件，他与律师草拟了有名的通用公共许可证（General Public License, GPL） 后来很多软件开发者可以借由这些基础的工具来进行程序开发，进一步壮大了自由软件团体。不过当时并没有“自由的UNIX内核”存在，所以这些软件仍只能在那些授权的UNIX平台上工作，直到Linux出现。 GNU开发的几个重要软件 Emacs：能显示语法错误的编辑器 GCC: GNU C Complier GLIBC: GNU C Library Bash shell 1991年，芬兰大学生Linus Torvalds在BBS上宣称他以Bash, gcc等工具写了一个小小的内核程序，这个内核程序可以在Intel 386上运行，从此开始了Linux不平凡的旅程。 1.1.3 关于GNU项目 自由软件运动 将源码连同软件一起发布 无形中有很多人帮你排错，程序会越来越壮大优秀。 自由软件的版权GNU GPL 避免自己开发出来的Open source自由软件被拿去做成商业软件 自由的真谛 重点不是免费，而是具有“自由度”的软件。用户可以自由执行、复制、再发行、学习、修改与强化自由软件。 一个软件挂上GPL版权声明后，就成了自由软件。 自由软件与商业行为 目前很多Linux开发商销售Linux这个GPL授权的软件，大多都是销售售后服务。他们会提供相关的手册说明文件、咨询、软件升级等。 目前自由软件工作者几乎都是通过“服务”领域来谋生。 1.2 Torvalds的Linux开发前面提到UNIX的历史，也提到Linux是由芬兰人Torvalds开发的。他怎么开发的，有什么渊源？ 1.2.1 Minix 托瓦兹在购买了最新的Intel 386的个人计算机后，就立即安装了Minix。托瓦兹通过Minix源码学习到了很多内核程序设计的设计理念。 1.2.2 对386硬件的多任务测试 早期Intel x86的芯片对多任务的处理不佳，CPU在不同的作业之间切换不是很顺畅，这个情况在386推出后有很大的改善。 托瓦兹写了三个小程序，一个持续输出A，一个持续输出B，一个将两个程序进行切换。结果他看到屏幕上一直顺利地出现ABABAB…他成功了。 要达到多任务的环境，除了CPU需要能够具有多任务的特性外，操作系统也需要支持这个功能。 1.2.3 初次释出Linux 0.02 Minix虽然很棒，但是谭宁邦教授不愿意进行功能加强，导致工程师在OS功能上欲求不满。于是托瓦兹决定自己开始内核程序的编写。 GNU提供的bash工作环境软件以及gcc编译程序等自由软件，让托瓦兹得以顺利编写内核程序。他将这个内核放置在网络上供大家下载。 为了让自己的Linux能兼容与UNIX系统，让UNIX上运行的软件在Linux上能运行，托瓦兹参考标准的POSIX（Portable Operating System Interface，可携式操作系统接口，规范内核与应用程序之间的接口）修改Linux。 整理：Linux与UNIX的联系与区别 1.2.4 Linux的开发：虚拟团队的产生 单一个人维护阶段：用户下载了这个内核并且安装之后，如果发生问题，或者是由于特殊要求需要某些硬件的驱动程序，那么用户就会主动反馈给托瓦兹。在托瓦兹能解决的问题范围内，他都能进行Linux内核的更新与排错。 广大志愿者加入阶段：因为托瓦兹总是有些硬件无法获得，志愿者就跟随Linux的原本设计架构写出兼容的驱动程序或软件。托瓦兹将该驱动程序带入内核中并测试，测试没问题便加入内核中。 因为随时都有程序代码加入，于是Linux便逐渐开发成具有模块的功能。即将某些功能独立于内核外，在需要时才加载到内核中。如此一来，如果有新的硬件驱动程序或者其他协议的程序代码进来时，就可以模块化，大大增加了Linux内核的可维护能力。 内核是一组程序，如果程序每次加入新功能都得重新编译和改变就很麻烦。模块化之后，原本的内核程序不需变动。 内核功能细部分共开发阶段：托瓦兹的副手将志愿者的修补程序或新功能的程序代码进行测试，并将结果上传给托瓦兹，由托瓦兹做最后内核加入的源码的选择与整并。全世界共同开发出现今的Linux， 因此被称为虚拟团队。 Linux是托瓦兹针对386机器写的，跟386硬件相关性很强，所以早期Linux确实不具有移植性。1994年以后，Linux便被开发到很多硬件上面去了。 1.2.5 Linux的内核版本 Linux的内核版本编号：2.6.18-92.e15 分别对应 主版本.次版本.释出版本-修改版本 主次版本为奇数：开发中版本，如2.5.xx 主次版本为偶数：稳定版本，如2.6.xx 释出版本是在主次版本架构不变的情况下增加的功能累计到一定程度后所释出的内核版本。 如果你修改过某个版本的内核程序代码，则被修改过的新内核版本就可以加上修改版本了。 1.2.6 Linux distribution Linux：一个操作系统最底层的内核及其提供的内核工具。因为Linux参考POSIX设计规范，因此兼容于UNIX操作系统，亦可称之为UNIX Like的一种（很像UNIX的OS） 很多软件已经能在Linux上运行，但是早期都是由黑客工程师开发维护的，他们并没有考虑到一般用户的能力。 许多商业公司飞行DVD或通过网络直接安装管理Linux系统。 Linux distribution = Kernel + Softwares + Tools，中文翻译为可完全安装套件。 Software含自由软件与商用软件 Tools可以让用户直接安装 几个主要的Linux distribution Red Hat、Ubuntu、CentOS 每个distribution差异都不大 1.3 Linux的特色 Linux硬件需求低、架构开放、系统稳定、保密性功能强、完全免费 1.3.2 Linux的优缺点 优点 稳定的系统 免费或少许费用 安全性、漏洞的快速修补 多任务、多用户：与win不同，Linux主机可以同时允许多人上线工作，同时使用主机资源 用户与用户组的规划 相对比较不耗资源的系统 适合需要小内核程序的嵌入式系统：只要几百KB的程序代码就能完整驱动整个计算机硬件。手机、相机、家电用品等。 多样GUI 缺点 需要用命令行的终端机模式进行系统的管理 没有特定的支持厂商 游戏支持度不足 专业软件支持度不足]]></content>
      <categories>
        <category>Linux鸟哥的私房菜</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux鸟哥第0章]]></title>
    <url>%2F2019%2F04%2F09%2FLinux%E9%B8%9F%E5%93%A5%E7%9A%84%E7%A7%81%E6%88%BF%E8%8F%9C%E7%AC%AC0%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[第0章 计算机概论 0.2 个人计算机架构与接口设备0.2.0 芯片组芯片组 分为两个桥接器来控制各组件的通信，分别是 北桥负责连接速度较快的CPU、内存、显卡，又叫系统总线 南桥负责连接速度较慢的周边接口，如硬盘、USB、网卡等，又叫IO总线 0.2.1 CPUCPU 微指令集和频率同时影响CPU工作效率 各个组件都是通过南北桥连接在一起，所以各组件最好速度一致。 外频 CPU与外部组件进行数据传输/运算时的速度 倍频 CPU内部用来加速工作性能的倍数，单位为倍 CPU频率 = 外频 * 倍频 超频 将CPU的倍频或外频通过主板的设定功能更改成较高频率。但CPU倍频通常在出厂时已经被锁定无法修改，因此外频常被超频。 频率非正常速度，有可能造成死机 0.2.3 显卡 显卡又称VGA(video graphics array) 每个图像显示的颜色会占用内存，因此显卡会有一个内存容量 显卡运算能力——GPU]]></content>
      <categories>
        <category>Linux鸟哥的私房菜</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown简单使用]]></title>
    <url>%2F2019%2F04%2F04%2FMarkdown%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[这个是一级标题这个是二级标题 列表1 列表2 列表3 a 子列表1 b 字列表2 列表3 baidu 斜字体 加粗字体 &lt;html&gt;&lt;/html&gt; 123&lt;html&gt; &lt;head&gt;代码块&lt;/head&gt;&lt;/html&gt; 我的内容是引用的]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>博客工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
