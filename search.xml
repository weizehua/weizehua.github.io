<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux鸟哥第1章]]></title>
    <url>%2F2019%2F04%2F09%2FLinux%E9%B8%9F%E5%93%A5%E7%9A%84%E7%A7%81%E6%88%BF%E8%8F%9C1%2F</url>
    <content type="text"><![CDATA[第1章 Linux是什么 1.1 Linux是什么 1.1.1 Linux是什么 Linux是一套操作系统，就是内核与系统调用接口两层 软件移植 由于不同的硬件的功能函数并不相同，所以同一套OS无法在不同的硬件平台上运行。如果能够参考硬件的功能函数并修改你的OS程序代码，那经过改版后的OS就能够在另一个硬件平台上运行了。 Linux提供了一个完整的OS中最底层的硬件控制与资源管理的完整架构，这个架构是沿袭UNIX良好传统而来的，所以相当稳定并且功能强大，可以在x86系统上跑。 Linux仅是其内核与内核提供的工具。 为什么Linux是很稳定的OS？它是如何来的？ 1.1.2 Linux之前的UNIX的历史 1969以前：BELL、MIT、GE共同发起Multics项目，目的是想要让大型主机可以同时提供300台以上的终端机连接使用。由于项目进度落后，资金缺乏，Bell实验室退出了该项目。 1969年：Ken Thompson的小型File Server System 退出Multics后，Thompson用汇编语言写出了一组内核程序，同时包括一些内核工具程序，以及一个小的文件系统。该系统就是UNIX的原型，被实验室的人成为Unics。 Thompson的文件系统有两个重要概念 所有的程序或系统装置都是文件。 不管构建编辑器还是附属文件，所写的程序只有一个目的，就是要有效地完成目标。 1973年：UNIX正式诞生，Ritchie等人以C语言写出第一个正式UNIX内核 因为Unics本来是以汇编语言写的，汇编语言具有专一性，每次安装到不同的机器都得重新编写汇编语言。 Ritchie以C语言重新改写与编译Unics的内核，最后发行出UNIX的正式版本。这使得UNIX很容易被移植到不同机器上。 1977年：重要的UNIX分支——BSD诞生 伯克利大学的Bill Joy在取得UNIX的内核源码后，修改成合适自己机器的版本，并且同时增加了很多工具软件与编译程序，最终命名为Berkeley Software Distribution(BSD)。Bill是Sun的创办者，Sun公司即是以BSD开发的内核进行自己的商业UNIX版本的开发的。 1979年：重要的System V架构与版权声明 很多公司各自出产的计算机配套搭配自己的UNIX操作系统，早期没有支持PC的操作系统出现。 AT&amp;T（BELL隶属于AT&amp;T）推出System V第七版UNIX，可以支持X86架构的PC。 AT&amp;T处于商业考虑，想收回UNIX版权，提出“不可对学生提供原码”的严格限制。造成UNIX业界的紧张气氛，引发了很多商业纠纷。 目前被称为纯种UNIX指的是System V和BSD这两套。 1984年之一: x86架构的Minix操作系统 谭邦宁教授无法教UNIX内核源码相关学问，于是自己动手将UNIX改写并移植到x86上，称为Minix，主要用在教育上。 1984年之二：GNU项目与FSF基金会成立 GNU项目的推展 Richard Mathew Stallman（史托曼）1984年开始GNU项目，目的是创建一个自由开放的UNIX操作系统（Free UNIX） 先写UNIX上运行的小程序，参考UNIX上现有的软件，依据这些软件的作用开发出功能相同的软件。GNU软件因为免费，逐渐打开知名度 C语言编译程序版本众多，但都是专利软件，于是开始编写C的编译程序，即GNU C Complier(GCC)! 史托曼成立自由软件基金会（Free Software Foundation，FSF），请更多工程师与志愿者一起完成了GCC。同时他还编写了更多可以被调用的C函数库（GNU C Library），以及用来操作OS的基本接口bash shell。这些都在1990年左右完成。 GNU的通用公共许可证 1985年为了避免GNU所开发的自由软件被其他人利用而成为专利软件，他与律师草拟了有名的通用公共许可证（General Public License, GPL） 后来很多软件开发者可以借由这些基础的工具来进行程序开发，进一步壮大了自由软件团体。不过当时并没有“自由的UNIX内核”存在，所以这些软件仍只能在那些授权的UNIX平台上工作，直到Linux出现。 GNU开发的几个重要软件 Emacs：能显示语法错误的编辑器 GCC: GNU C Complier GLIBC: GNU C Library Bash shell 1991年，芬兰大学生Linus Torvalds在BBS上宣称他以Bash, gcc等工具写了一个小小的内核程序，这个内核程序可以在Intel 386上运行，从此开始了Linux不平凡的旅程。 1.1.3 关于GNU项目]]></content>
      <categories>
        <category>Linux鸟哥的私房菜</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux鸟哥第0章]]></title>
    <url>%2F2019%2F04%2F09%2FLinux%E9%B8%9F%E5%93%A5%E7%9A%84%E7%A7%81%E6%88%BF%E8%8F%9C0%2F</url>
    <content type="text"><![CDATA[第0章 计算机概论 0.2 个人计算机架构与接口设备0.2.0 芯片组芯片组 分为两个桥接器来控制各组件的通信，分别是 北桥负责连接速度较快的CPU、内存、显卡，又叫系统总线 南桥负责连接速度较慢的周边接口，如硬盘、USB、网卡等，又叫IO总线 0.2.1 CPUCPU 微指令集和频率同时影响CPU工作效率 各个组件都是通过南北桥连接在一起，所以各组件最好速度一致。 外频 CPU与外部组件进行数据传输/运算时的速度 倍频 CPU内部用来加速工作性能的倍数，单位为倍 CPU频率 = 外频 * 倍频 超频 将CPU的倍频或外频通过主板的设定功能更改成较高频率。但CPU倍频通常在出厂时已经被锁定无法修改，因此外频常被超频。 频率非正常速度，有可能造成死机 0.2.3 显卡 显卡又称VGA(video graphics array) 每个图像显示的颜色会占用内存，因此显卡会有一个内存容量 显卡运算能力——GPU]]></content>
      <categories>
        <category>Linux鸟哥的私房菜</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown简单使用]]></title>
    <url>%2F2019%2F04%2F04%2FMarkdown%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[这个是一级标题这个是二级标题 列表1 列表2 列表3 a 子列表1 b 字列表2 列表3 baidu 斜字体 加粗字体 &lt;html&gt;&lt;/html&gt; 123&lt;html&gt; &lt;head&gt;代码块&lt;/head&gt;&lt;/html&gt; 我的内容是引用的]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>博客工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
